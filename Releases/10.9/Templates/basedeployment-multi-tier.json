{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "functions": [
  ],
  "parameters": {
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Virtual Machine Administrator (Windows) Account"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Username for the Virtual Machine Administrator (Windows) Account"
      }
    },
    "appGatewayPrivateIP": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Available IP address in Application Gateway Subnet Range to be used with external dns name"
      }
    },
    "appGatewayPrivateIPSubnet": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Subnet associated with Private IP"
      }
    },
    "appGatewaySubnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "arcgisDeploymentId": {
      "type": "string",
      "metadata": {
        "description": "Deployment Id required in case of post deployment operations and optional in case of new deployments"
      },
      "defaultValue": ""
    },
    "autoShutDownTime": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Auto Shut down time in hh:ss format."
      }
    },
    "AzureSQLMIAADAdministratorLoginName": {
      "type": "string",
      "metadata": {
        "description": "The login name of the Azure AD application, user, or group, to use as the AAD Administrator for the Azure SQL Server"
      }
    },
    "AzureSQLMIAADAdministratorObjectID": {
      "type": "string",
      "metadata": {
        "description": "The object ID of the Azure AD application, user, or group, to use as the AAD Administrator for the Azure SQL Server"
      }
    },
    "AzureSQLMIAADAdministratorType": {
      "type": "string",
      "defaultValue": "Group",
      "allowedValues": [
        "Application",
        "Group",
        "User"
      ],
      "metadata": {
        "description": "The type of Azure AD Administrator to add - a, application, user, or group."
      }
    },
    "AzureSQLMIAdministratorName": {
      "type": "string",
      "defaultValue": "arcgisdba",
      "metadata": {
        "description": "The username of the local administrator for the Azure SQL Server"
      }
    },
    "AzureSQLMIAdministratorPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the local administrator for the Azure SQL Server"
      }
    },
    "AzureSQLMISubnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "AzureSQLMISKUName": {
      "type": "string",
      "defaultValue": "GP_Gen5",
      "allowedValues": [
        "GP_Gen5",
        "BC_Gen5"
      ],
      "metadata": {
        "description": "Enter sku name."
      }
    },
    "AzureSQLMIvCores": {
      "type": "int",
      "defaultValue": 8,
      "allowedValues": [
        8,
        16,
        24,
        32,
        40,
        64,
        80
      ],
      "metadata": {
        "description": "Enter number of vCores."
      }
    },
    "AzureSQLMIStorageSize": {
      "type": "int",
      "defaultValue": 256,
      "maxValue": 8192,
      "minValue": 32,
      "metadata": {
        "description": "Enter storage size."
      }
    },
    "AzureSQLMILicenseType": {
      "type": "string",
      "defaultValue": "LicenseIncluded",
      "allowedValues": [
        "BasePrice",
        "LicenseIncluded"
      ],
      "metadata": {
        "description": "Enter license type."
      }
    },
    "dataStoreTypes": {
      "type": "string",
      "defaultValue": "Relational",
      "metadata": {
        "description": "(Optional) The types of ArcGIS Data Stores that are enabled for this deployment"
      }
    },
    "dataStoreVirtualMachineDataDiskSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the DataStore tier of Virtual Machines"
      }
    },
    "dataStoreVirtualMachineDataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Data Store tier of Virtual Machines"
      }
    },
    "dataStoreVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Data Store Tier"
      }
    },
    "dataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the DataStore tier of Virtual Machines"
      }
    },
    "dataStoreVirtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Type for the Operating System (c Drive) Disk for the DataStore tier of Virtual Machines"
      }
    },
    "dataStoreVirtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Virtual Machine Size for the Data Store tier of machines"
      }
    },
    "deploymentPrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix applied to all resources provisioned as part of this template"
      },
      "maxLength": 3
    },
    "BaseSequenceNumber": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 999,
      "metadata": {
        "description": "The base sequence number for all resources to create."
      }
    },
    "deploymentTrackingID": {
      "type": "string",
      "metadata": {
        "description": "(Optional) deployment Tracking ID based on Orchestrator being Automation or Cloud Builder "
      },
      "defaultValue": "01702208-6a87-494b-9f6c-5e6be4bea47b"
    },
    "deployPublicIPWhenUsingPrivateIP": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "(Optional) Deploys an unused public IP when using a Private Ip as Application Gateway V2 doesn't support only Private IP deployments yet."
      }
    },
    "dnsPrefixForPublicIpAddress": {
      "type": "string",
      "maxLength": 80,
      "defaultValue": "",
      "metadata": {
        "description": "DNS name for the Public IP address resource asociated with the site deployment. It needs to be unique across the region of deployment"
      }
    },
    "enableAutomaticUpdates": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable Automatic (Windows) Operating System updates"
      }
    },
    "enableAutoShutDown": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable auto shutdown at specified time."
      }
    },
    "enableRDPAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Remote Desktop Access to the File Share Machine should be enabled."
      }
    },
    "existingPublicIPName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the existing Public IP"
      }
    },
    "existingPublicIPResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Resource Group for the existing Public IP"
      }
    },
    "existingVirtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Virtual Network"
      }
    },
    "externalDnsHostName": {
      "type": "string",
      "metadata": {
        "description": "DNS name for the site deployment. It will be a custom domain (e.g. mysite.contoso.com) if using a Private IP or an SSL certificate, otherwise will be the Azure DNS <dnsPrefixForPublicIpAddress>.<location>.cloudapp.azure.com"
      }
    },
    "fileShareName": {
      "type": "string",
      "defaultValue": "fileshare",
      "metadata": {
        "description": "The name of the file share to create"
      }
    },
    "GISDatastoreRelationalVMAvailabilityZone": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "The single availability zone to use for the RDP VM. The length of the array should be greater than or equal to the number of VMs to deploy (e.g., 4 VMs to build, then at least 4 availability zones should be listed - '1', '2', '3', '2'. Provide an empty array to avoid using Availability Zones.)"
      }
    },
    "GISDatastoreSpatiotemporalVMAvailabilityZone": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "The single availability zone to use for the RDP VM. The length of the array should be greater than or equal to the number of VMs to deploy (e.g., 4 VMs to build, then at least 4 availability zones should be listed - '1', '2', '3', '2'. Provide an empty array to avoid using Availability Zones.)"
      }
    },
    "GISDatastoreTileCacheAvailabilityZone": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "The single availability zone to use for the RDP VM. The length of the array should be greater than or equal to the number of VMs to deploy (e.g., 4 VMs to build, then at least 4 availability zones should be listed - '1', '2', '3', '2'. Provide an empty array to avoid using Availability Zones.)"
      }
    },
    "GISPortalVMAvailabilityZone": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "The single availability zone to use for the RDP VM. The length of the array should be greater than or equal to the number of VMs to deploy (e.g., 4 VMs to build, then at least 4 availability zones should be listed - '1', '2', '3', '2'. Provide an empty array to avoid using Availability Zones.)"
      }
    },
    "GISServerVMAvailabilityZone": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "The single availability zone to use for the RDP VM. The length of the array should be greater than or equal to the number of VMs to deploy (e.g., 4 VMs to build, then at least 4 availability zones should be listed - '1', '2', '3', '2'. Provide an empty array to avoid using Availability Zones.)"
      }
    },
    "GISSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "joinWindowsDomain": {
      "type": "bool",
      "metadata": {
        "description": "(Optional) Indicates whether the virtual machines should join an existing Windows Active Directory which provides domain join and DNS services in the Virtual Network"
      },
      "defaultValue": false
    },
    "JumpBoxSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "JumpBoxVirtualMachineName": {
      "type": "string",
      "metadata": {
        "description": "Name of the virtual machine for the Portal Tier"
      }
    },
    "JumpBoxVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Jump Box tier of Virtual Machines"
      }
    },
    "JumpBoxVirtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Managed Disk Type for the Operating System (c Drive) Disk for the Jump Box of Virtual Machines"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Azure Region for the site deployment. All Resources provisioned are created here"
      }
    },
    "omsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Azure Monitor Logs workspace name"
      },
      "defaultValue": ""
    },
    "omsWorkspaceResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Azure Monitor Logs Workspace Resource Group Name"
      },
      "defaultValue": ""
    },
    "OSImageSKU": {
      "type": "string",
      "allowedValues": [
        "2019-datacenter-gensecond",
        "2022-datacenter-g2",
        "2022-datacenter-azure-edition",
        "2022-datacenter-azure-edition-smalldisk"
      ],
      "defaultValue": "2022-datacenter-azure-edition"
    },
    "portalContext": {
      "type": "string",
      "metadata": {
        "description": "ArcGIS Portal Site Context"
      },
      "defaultValue": "portal"
    },
    "portalVirtualMachineDataDiskSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Portal tier of Virtual Machines"
      }
    },
    "portalVirtualMachineDataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Portal tier of Virtual Machines"
      }
    },
    "portalVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Portal Tier"
      }
    },
    "portalVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        327678
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Portal tier of Virtual Machines"
      }
    },
    "portalVirtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Type for the Operating System (c Drive) Disk for the Portal tier of Virtual Machines"
      }
    },
    "portalVirtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Virtual Machine Size for the Portal tier of machines"
      }
    },
    "RDPVMAvailabilityZone": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "The single availability zone to use for the RDP VM. The length of the array should be greater than or equal to the number of VMs to deploy (e.g., 4 VMs to build, then at least 4 availability zones should be listed - '1', '2', '3', '2'. Provide an empty array to avoid using Availability Zones.)"
      }
    },
    "serverContext": {
      "type": "string",
      "metadata": {
        "description": "ArcGIS Server Site Context"
      },
      "defaultValue": "server"
    },
    "serverVirtualMachineDataDiskSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed disk size for the additional (Data) disk attached to the Server tier of Virtual Machines"
      }
    },
    "serverVirtualMachineDataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Server tier of Virtual Machines"
      }
    },
    "serverVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Server Tier"
      }
    },
    "serverVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Server tier of Virtual Machines"
      }
    },
    "serverVirtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Type for the Operating System (c Drive) Disk for the Server tier of Virtual Machines"
      }
    },
    "serverVirtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Virtual Machine Size for the Server tier of machines"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineDataDiskSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Spatiotemporal Big Data tier of Virtual Machines"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineDataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Spatiotemporal Big Data Store tier of Virtual Machines"
      }
    },
    "spatiotemporalBigdataStoreVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Spatiotemporal Big Data Store Tier"
      },
      "defaultValue": ""
    },
    "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Portal tier of Virtual Machines"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Managed Disk Type for the Operating System (c Drive) Disk for the Spatiotemporal Big Data Store tier of Virtual Machines"
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Virtual Machine Size for the Spatiotemporal Big Data Store tier of machines"
      }
    },
    "sslCertificateData": {
      "type": "string",
      "metadata": {
        "description": "Base-64 encoded form of the .pfx file. This is the cert terminating on the Application Gateway."
      },
      "defaultValue": ""
    },
    "sslCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for .pfx certificate"
      },
      "defaultValue": ""
    },
    "StorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "The name of the storage account used with Azure Files, and for the configuration data."
      }
    },
    "StorageAccountSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "tileCacheDataStoreVirtualMachineDataDiskSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Tile Cache Data tier of Virtual Machines"
      }
    },
    "tileCacheDataStoreVirtualMachineDataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "(Optional) Managed disk type for the additional (Data) disk attached to the Tile Cache Store tier of Virtual Machines"
      }
    },
    "tileCacheDataStoreVirtualMachineNames": {
      "type": "string",
      "metadata": {
        "description": "Comma seperated list of virtual machine names for the Tile Cache Data Store Tier"
      },
      "defaultValue": ""
    },
    "tileCacheDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Portal tier of Virtual Machines"
      }
    },
    "tileCacheDataStoreVirtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Managed Disk Type for the Operating System (c Drive) Disk for the Tile Cache Data Store tier of Virtual Machines"
      }
    },
    "tileCacheDataStoreVirtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Virtual Machine Size for the Tile Cache Data Store tier of machines"
      }
    },
    "timeZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Standard Id for the timezone to set for the Virtual Machines in the deployment"
      }
    },
    "TrustedRootCertificateData": {
      "type": "string",
      "metadata": {
        "description": "A base64 string representing the trusted root certificate to add to the Application Gateway. Used for backend communications."
      }
    },
    "usesExistingPublicIP": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to use existing Public IP is usesPrivateIP is false"
      }
    },
    "usesPrivateIP": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Files (SMB protocol) is used for the server config and portal content store"
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Resource Group for the existing Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "WebAdaptorSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing Subnet within the Virtual Network specified with the 'existingVirtualNetworkName' parameter"
      }
    },
    "WebAdaptorVirtualMachineDataDiskSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Web Adaptor tier of Virtual Machines"
      }
    },
    "WebAdaptorVirtualMachineDataDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Managed Disk Type for the Operating System (c Drive) Disk for the Web Adaptor of Virtual Machines"
      }
    },
    "WebAdaptorVirtualMachineName": {
      "type": "string",
      "metadata": {
        "description": "Virtual Machine name for the Web Adaptor Tier"
      }
    },
    "WebAdaptorVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Web Adaptor tier of Virtual Machines"
      }
    },
    "WebAdaptorVirtualMachineOSDiskType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Standard_LRS",
        "StandardSSD_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Managed Disk Type for the Operating System (c Drive) Disk for the Web Adaptor of Virtual Machines"
      }
    },
    "WebAdaptorVMAvailabilityZone": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 3,
      "metadata": {
        "description": "The single availability zone to use for the RDP VM. The length of the array should be greater than or equal to the number of VMs to deploy (e.g., 4 VMs to build, then at least 4 availability zones should be listed - '1', '2', '3', '2'. Provide an empty array to avoid using Availability Zones.)"
      }
    },
    "windowsDomainAdministratorPassword": {
      "type": "securestring",
      "metadata": {
        "description": "(Optional) Password for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "windowsDomainAdministratorUserName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Username for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    },
    "windowsDomainName": {
      "type": "string",
      "metadata": {
        "description": "(Optional) Domain FQDN where the virtual machine will be joined. Required if joinWindowsDomain = true"
      },
      "defaultValue": ""
    }
  },
  "variables": {
    "deploymentId": "[if(empty(parameters('arcgisDeploymentId')),uniqueString(resourceGroup().id, concat(parameters('serverContext'), parameters('location')), parameters('externalDnsHostName')),parameters('arcgisDeploymentId'))]",
    "baseSequenceNumberFormatted": "[format('{0:00}', parameters('BaseSequenceNumber'))]",
    "baseSequenceNumberOffsetted": "[add(parameters('BaseSequenceNumber'), 1)]",
    "baseSequenceNumberOffsettedFormatted": "[format('{0:00}', variables('baseSequenceNumberOffsetted'))]",
    "computeApiVersion": "2018-06-01",
    "networkApiVersion": "2018-08-01",
    "publicIPAddressResourceName": "[if(parameters('usesExistingPublicIP'), parameters('existingPublicIPName'), concat(parameters('deploymentPrefix'), 'PublicIP'))]",
    "publicIPAddressResourceGroupName": "[if(parameters('usesExistingPublicIP'), parameters('existingPublicIPResourceGroupName'), resourceGroup().name)]",
    "unusedPublicIPPWhenUsingPrivateIPDnsPrefix": "[concat('ip',variables('deploymentId'),parameters('serverContext'))]",
    "unusedPublicIPWhenUsingPrivateIPResourceName": "[concat(variables('unusedPublicIPPWhenUsingPrivateIPDnsPrefix'),'UnusedPublicIP')]",
    "vnetID": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks',parameters('existingVirtualNetworkName'))]",
    "gisSubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('GISSubnetName'))]",
    "webAdaptorSubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('WebAdaptorSubnetName'))]",
    "jumpbBoxSubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('JumpBoxSubnetName'))]",
    "appGatewaySubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('appGatewaySubnetName'))]",
    "storageAccountSubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('StorageAccountSubnetName'))]",
    "azureSQLMISubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('AzureSQLMISubnetName'))]",
    "nicName": "[concat('NIC-',variables('baseSequenceNumberFormatted'))]",
    "AzureSQLMIName": "[concat(parameters('deploymentPrefix'), '-ASQLMI-', variables('baseSequenceNumberFormatted'))]",
    "serverAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-Server')]",
    "serverVirtualMachineNames": "[split(parameters('serverVirtualMachineNames'),',')]",
    "numberOfServerVirtualMachines": "[length(variables('serverVirtualMachineNames'))]",
    "portalAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-Portal')]",
    "portalVirtualMachineNames": "[split(parameters('portalVirtualMachineNames'),',')]",
    "numberOfPortalVirtualMachines": "[length(variables('portalVirtualMachineNames'))]",
    "dataStoreAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-DataStore')]",
    "dataStoreVirtualMachineNames": "[split(parameters('dataStoreVirtualMachineNames'),',')]",
    "numberOfDataStoreVirtualMachines": "[length(variables('dataStoreVirtualMachineNames'))]",
    "enableSpatiotemporalBigDataStore": "[contains(parameters('dataStoreTypes'),'SpatioTemporal')]",
    "spatiotemporalBigDataStoreAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-SpatiotemporalDataStore')]",
    "spatiotemporalBigDataStoreVirtualMachineNames": "[split(parameters('spatiotemporalBigdataStoreVirtualMachineNames'),',')]",
    "spatiotemporalBigDataStoreVirtualMachineNameOptions": {
      "true": "[variables('spatiotemporalBigDataStoreVirtualMachineNames')]",
      "false": [
        "sa",
        "sb",
        "sc",
        "sd",
        "se",
        "sf",
        "sg",
        "sh",
        "si",
        "sj",
        "sk",
        "sl",
        "sm",
        "sn",
        "so",
        "sp"
      ]
    },
    "numberOfSpatiotemporalBigDataStoreVirtualMachines": "[length(variables('spatiotemporalBigDataStoreVirtualMachineNames'))]",
    "enableTileCacheDataStore": "[not(empty(parameters('tileCacheDataStoreVirtualMachineNames')))]",
    "tileCacheDataStoreAvailablitySetName": "[concat(parameters('deploymentPrefix'), 'AvailabilitySet-TileCacheDataStore')]",
    "tileCacheDataStoreVirtualMachineNames": "[split(parameters('tileCacheDataStoreVirtualMachineNames'),',')]",
    "tileCacheDataStoreVirtualMachineNameOptions": {
      "true": "[variables('tileCacheDataStoreVirtualMachineNames')]",
      "false": [
        "ta",
        "tb",
        "tc",
        "td",
        "te",
        "tf",
        "tg",
        "th",
        "ti",
        "tj",
        "tk",
        "tl",
        "tm",
        "tn",
        "to",
        "tp"
      ]
    },
    "numberOftileCacheDataStoreVirtualMachines": "[length(variables('tileCacheDataStoreVirtualMachineNames'))]",
    "frontendIPConfigurationsName": "[concat(parameters('deploymentPrefix'), 'EnterpriseAppGatewayFrontendIP')]",
    "publicIPFrontEndConfiguration": [
      {
        "name": "[variables('frontendIPConfigurationsName')]",
        "properties": {
          "PublicIPAddress": {
            "id": "[resourceId(variables('publicIPAddressResourceGroupName'),'Microsoft.Network/publicIPAddresses',variables('publicIPAddressResourceName'))]"
          }
        }
      }
    ],
    "privateIPFrontEndConfiguration": {
      "true": [
        {
          "name": "unusedAppGatewayFrontendPublicIP",
          "properties": {
            "PublicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('unusedPublicIPWhenUsingPrivateIPResourceName'))]"
            }
          }
        },
        {
          "name": "[variables('frontendIPConfigurationsName')]",
          "properties": {
            "privateIPAddress": "[parameters('appGatewayPrivateIP')]",
            "privateIPAllocationMethod": "Static",
            "subnet": {
              "id": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('appGatewayPrivateIPSubnet'))]"
            }
          }
        }
      ],
      "false": [
        {
          "name": "[variables('frontendIPConfigurationsName')]",
          "properties": {
            "privateIPAddress": "[parameters('appGatewayPrivateIP')]",
            "privateIPAllocationMethod": "Static",
            "subnet": {
              "id": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('appGatewayPrivateIPSubnet'))]"
            }
          }
        }
      ]
    },
    "frontendport443Name": "[concat(parameters('deploymentPrefix'), 'EnterprisePort443')]",
    "frontendport80Name": "[concat(parameters('deploymentPrefix'), 'EnterprisePort80')]",
    "httpDeploymentListnerName": "[concat(parameters('deploymentPrefix'), 'HttpEnterpriseDeploymentListner')]",
    "httpsDeploymentListnerName": "[concat(parameters('deploymentPrefix'), 'HttpsEnterpriseDeploymentListner')]",
    "urlPathMapsName": "[concat(parameters('deploymentPrefix'), 'EnterprisePathMap')]",
    "redirectConfigurationName": "[concat(parameters('deploymentPrefix'), 'EnterpriseHttpToHttps')]",
    "requestRoutingRule": "[concat(parameters('deploymentPrefix'), 'EnterpriseRequestRoutingRule')]",
    "httpToHttpsRequestRoutingRule": "[concat(parameters('deploymentPrefix'), 'HttpToHttpsEnterpriseRequestRoutingRule')]",
    "serverBackendPoolName": "[concat(parameters('deploymentPrefix'), 'ServerBackendPool')]",
    "portalBackendPoolName": "[concat(parameters('deploymentPrefix'), 'PortalBackendPool')]",
    "portalBackendHttpsSettingName": "[concat(parameters('deploymentPrefix'), 'PortalHttpsSetting')]",
    "serverBackendHttpsSettingName": "[concat(parameters('deploymentPrefix'), 'ServerHttpsSetting')]",
    "serverRewriteRuleSetName": "[concat(parameters('deploymentPrefix'), 'ServerRewriteRuleSet')]",
    "portalRewriteRuleSetName": "[concat(parameters('deploymentPrefix'), 'PortalRewriteRuleSet')]",
    "serverBackendProbeName": "[concat(parameters('deploymentPrefix'), 'ServerProbeName')]",
    "portalBackendProbeName": "[concat(parameters('deploymentPrefix'), 'PortalProbeName')]",
    "jumpBoxNicName": "[concat(parameters('JumpBoxVirtualMachineName'),'-',variables('nicName'))]",
    "webAdaptorNicName": "[concat(parameters('WebAdaptorVirtualMachineName'),'-',variables('nicName'))]",
    "omsWorkspaceResourceId": "[if(and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName')))), resourceId(parameters('omsWorkspaceResourceGroupName'), 'Microsoft.OperationalInsights/workspaces/', parameters('omsWorkspaceName')),'')]",
    "storageAccountName": "[toLower(parameters('StorageAccountName'))]",
    "storageAccountPrivateEndpointName": "[concat(variables('storageAccountName'), '-PE-', variables('baseSequenceNumberFormatted'))]",
    "multiPurposeNSGName": "[concat(parameters('deploymentPrefix'), '-NSG-', variables('baseSequenceNumberFormatted'))]",
    "azureSQLMINSGName": "[concat(parameters('deploymentPrefix'), '-NSG-', variables('baseSequenceNumberOffsettedFormatted'))]",
    "azureSQLMIUDRName": "[concat(parameters('deploymentPrefix'), '-UDR-', variables('baseSequenceNumberFormatted'))]",
    "gisServerAvailabilitySetObject": {
      "id": "[if(less(length(string(parameters('GISServerVMAvailabilityZone'))),1),resourceId('Microsoft.Compute/availabilitySets',variables('serverAvailablitySetName')),json('null'))]"
    },
    "gisPortalAvailabilitySetObject": {
      "id": "[if(less(length(string(parameters('GISPortalVMAvailabilityZone'))),1),resourceId('Microsoft.Compute/availabilitySets',variables('portalAvailablitySetName')),json('null'))]"
    },
    "datastoreAvailabilitySetObject": {
      "id": "[if(less(length(string(parameters('GISDatastoreRelationalVMAvailabilityZone'))),1),resourceId('Microsoft.Compute/availabilitySets',variables('dataStoreAvailablitySetName')),json('null'))]"
    },
    "tileCacheDatastoreAvailabilitySetObject": {
      "id": "[if(less(length(string(parameters('GISDatastoreTileCacheAvailabilityZone'))),1),resourceId('Microsoft.Compute/availabilitySets',variables('tileCacheDataStoreAvailablitySetName')),json('null'))]"
    },
    "spatioTemporalAvailabilitySetObject": {
      "id": "[if(less(length(string(parameters('GISDatastoreSpatiotemporalVMAvailabilityZone'))),1),resourceId('Microsoft.Compute/availabilitySets',variables('spatiotemporalBigDataStoreAvailablitySetName')),json('null'))]"
    },
    "userAssignedManagedIdentityName": "[concat(parameters('deploymentPrefix'), '-UAMI-GIS-01')]",
    "userAssignedManagedIdentityID": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedManagedIdentityName'))]",
    "keyVaultName": "[concat(parameters('deploymentPrefix'), '-KEY-GIS-', variables('baseSequenceNumberFormatted'))]",
    "keyVaultPrivateEndpointName": "[concat(variables('keyVaultName'), '-PE-', variables('baseSequenceNumberFormatted'))]",
    "appGatewayName": "[concat(parameters('deploymentPrefix'), '-APPGW-GIS-', variables('baseSequenceNumberFormatted'))]"
  },
  "resources": [
    {
      "apiVersion": "2021-04-01",
      "name": "[concat('pid-',parameters('deploymentTrackingID'))]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "parameters": {
          },
          "contentVersion": "1.0.0.0",
          "resources": [
          ]
        }
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[variables('userAssignedManagedIdentityName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "User-Assigned Managed Identity for App Gateway"
      }
    },
    {
      "condition": "[parameters('enableRDPAccess')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('jumpBoxNicName')]",
      "location": "[parameters('location')]",
      "apiVersion": "2020-11-01",
      "tags": {
        "displayName": "RDP Jump Box Network Interface",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "jumpbox-ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('jumpbBoxSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[and(not(empty(parameters('adminPassword'))),equals(string(parameters('enableRDPAccess')),'True'))]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('JumpBoxVirtualMachineName')]",
      "location": "[parameters('location')]",
      "apiVersion": "2021-11-01",
      "tags": {
        "displayName": "RDP Jump Box",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "arcgis-vm-roles": "RDPJumpBox"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('jumpBoxNicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_DS2_v2"
        },
        "osProfile": {
          "computerName": "[parameters('JumpBoxVirtualMachineName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('OSImageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('JumpBoxVirtualMachineName'),'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('JumpBoxVirtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('JumpBoxVirtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('jumpBoxNicName'))]"
            }
          ]
        }
      },
      "zones": "[if(less(length(string(parameters('RDPVMAvailabilityZone'))),1),createArray(''),createArray(string(parameters('RDPVMAvailabilityZone'))))]"
    },
    {
      "condition": "[and(equals(string(parameters('enableRDPAccess')),'True'),equals(string(parameters('enableAutoShutDown')),'True'))]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', parameters('JumpBoxVirtualMachineName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[parameters('JumpBoxVirtualMachineName')]"
      ],
      "properties": {
        "status": "Enabled",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings": {
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', parameters('JumpBoxVirtualMachineName'))]",
        "dailyRecurrence": {
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('webAdaptorNicName')]",
      "location": "[parameters('location')]",
      "apiVersion": "2020-11-01",
      "tags": {
        "displayName": "Web Adaptor VM Network Interface",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "webAdaptor-ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('webAdaptorSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[not(empty(parameters('adminPassword')))]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('WebAdaptorVirtualMachineName')]",
      "location": "[parameters('location')]",
      "apiVersion": "2021-11-01",
      "tags": {
        "displayName": "Web Adaptor VM",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "arcgis-vm-roles": "WebAdaptorBox"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('webAdaptorNicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_DS2_v2"
        },
        "osProfile": {
          "computerName": "[parameters('WebAdaptorVirtualMachineName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('OSImageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(parameters('WebAdaptorVirtualMachineName'),'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('WebAdaptorVirtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('WebAdaptorVirtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": "[parameters('WebAdaptorVirtualMachineDataDiskSize')]",
              "lun": 0,
              "createOption": "Empty",
              "name": "[concat(parameters('WebAdaptorVirtualMachineName'),'-','DataDisk-01')]",
              "managedDisk": {
                "storageAccountType": "[parameters('WebAdaptorVirtualMachineDataDiskType')]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('webAdaptorNicName'))]"
            }
          ]
        }
      },
      "zones": "[if(less(length(string(parameters('WebAdaptorVMAvailabilityZone'))),1),createArray(''),createArray(string(parameters('WebAdaptorVMAvailabilityZone'))))]"
    },
    {
      "condition": "[equals(string(parameters('enableAutoShutDown')),'True')]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', parameters('WebAdaptorVirtualMachineName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[parameters('WebAdaptorVirtualMachineName')]"
      ],
      "properties": {
        "status": "Enabled",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings": {
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', parameters('WebAdaptorVirtualMachineName'))]",
        "dailyRecurrence": {
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "condition": "[and(equals(string(parameters('enableRDPAccess')),'True'),equals(string(parameters('joinWindowsDomain')),'True'))]",
      "apiVersion": "2021-11-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('JumpBoxVirtualMachineName'),'/JoinDomain')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[parameters('JumpBoxVirtualMachineName')]"
      ],
      "tags": {
        "displayName": "(Optional) Jumpbox Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('serverAvailablitySetName')]",
      "condition": "[less(length(string(parameters('GISServerVMAvailabilityZone'))),1)]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Server Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('serverVirtualMachineNames')[copyIndex()], '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nic-copy",
        "count": "[variables('numberOfServerVirtualMachines')]"
      },
      "tags": {
        "displayName": "Server Network Interfaces",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('gisSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[not(empty(parameters('adminPassword')))]",
      "apiVersion": "2021-11-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('serverVirtualMachineNames')[copyIndex()]]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfServerVirtualMachines')]"
      },
      "tags": {
        "arcgis-vm-roles": "Server",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "Server Virtual Machines"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('serverVirtualMachineNames')[copyIndex()], '-', variables('nicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('serverAvailablitySetName'))]"
      ],
      "properties": {
        "availabilitySet": "[if(less(length(string(parameters('GISServerVMAvailabilityZone'))),1),variables('gisServerAvailabilitySetObject'),json('null'))]",
        "hardwareProfile": {
          "vmSize": "[parameters('serverVirtualMachineSize')]"
        },
        "osProfile": {
          "computername": "[variables('serverVirtualMachineNames')[copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('OSImageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('serverVirtualMachineNames')[copyIndex()],'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('serverVirtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('serverVirtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": "[parameters('serverVirtualMachineDataDiskSize')]",
              "lun": 0,
              "createOption": "Empty",
              "name": "[concat(variables('serverVirtualMachineNames')[copyIndex()],'-','DataDisk-01')]",
              "managedDisk": {
                "storageAccountType": "[parameters('serverVirtualMachineDataDiskType')]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('serverVirtualMachineNames')[copyIndex()], '-',variables('nicName')))]"
            }
          ]
        }
      },
      "zones": "[if(less(length(string(parameters('GISServerVMAvailabilityZone'))),1),createArray(''),createArray(string(parameters('GISServerVMAvailabilityZone'))))]"
    },
    {
      "condition": "[equals(string(parameters('enableAutoShutDown')), 'True')]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', variables('serverVirtualMachineNames')[copyIndex()])]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "gisAutoShutDownCopy",
        "count": "[variables('numberOfServerVirtualMachines')]"
      },
      "dependsOn": [
        "[variables('serverVirtualMachineNames')[copyIndex()]]"
      ],
      "properties": {
        "status": "Enabled",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings": {
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('serverVirtualMachineNames')[copyIndex()])]",
        "dailyRecurrence": {
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "condition": "[equals(string(parameters('joinWindowsDomain')), 'True')]",
      "apiVersion": "2021-11-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('serverVirtualMachineNames')[copyIndex()],'/JoinDomain',copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "gisServerDomainJoinCopy",
        "count": "[variables('numberOfServerVirtualMachines')]"
      },
      "dependsOn": [
        "[variables('serverVirtualMachineNames')[copyIndex()]]"
      ],
      "tags": {
        "displayName": "(Optional) Server Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('portalAvailablitySetName')]",
      "condition": "[less(length(string(parameters('GISPortalVMAvailabilityZone'))),1)]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Portal Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('portalVirtualMachineNames')[copyIndex()], '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nic-copy",
        "count": "[variables('numberOfPortalVirtualMachines')]"
      },
      "tags": {
        "displayName": "Portal Network Interfaces",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('gisSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[not(empty(parameters('adminPassword')))]",
      "apiVersion": "2021-11-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('portalVirtualMachineNames')[copyIndex()]]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfPortalVirtualMachines')]"
      },
      "tags": {
        "arcgis-vm-roles": "Portal",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "Portal Virtual Machines"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('portalVirtualMachineNames')[copyIndex()], '-', variables('nicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('portalAvailablitySetName'))]"
      ],
      "properties": {
        "availabilitySet": "[if(less(length(string(parameters('GISPortalVMAvailabilityZone'))),1),variables('gisPortalAvailabilitySetObject'),json('null'))]",
        "hardwareProfile": {
          "vmSize": "[parameters('portalVirtualMachineSize')]"
        },
        "osProfile": {
          "computername": "[variables('portalVirtualMachineNames')[copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('OSImageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('portalVirtualMachineNames')[copyIndex()],'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('portalVirtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('portalVirtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": "[parameters('portalVirtualMachineDataDiskSize')]",
              "lun": 0,
              "createOption": "Empty",
              "name": "[concat(variables('portalVirtualMachineNames')[copyIndex()],'-','DataDisk-01')]",
              "managedDisk": {
                "storageAccountType": "[parameters('portalVirtualMachineDataDiskType')]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('portalVirtualMachineNames')[copyIndex()], '-',variables('nicName')))]"
            }
          ]
        }
      },
      "zones": "[if(less(length(string(parameters('GISPortalVMAvailabilityZone'))),1),createArray(''),createArray(string(parameters('GISPortalVMAvailabilityZone'))))]"
    },
    {
      "condition": "[equals(string(parameters('enableAutoShutDown')), 'True')]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', variables('portalVirtualMachineNames')[copyIndex()])]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "portalAutoShutDownCopy",
        "count": "[variables('numberOfPortalVirtualMachines')]"
      },
      "dependsOn": [
        "[variables('portalVirtualMachineNames')[copyIndex()]]"
      ],
      "properties": {
        "status": "Enabled",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings": {
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('portalVirtualMachineNames')[copyIndex()])]",
        "dailyRecurrence": {
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "condition": "[equals(string(parameters('joinWindowsDomain')), 'True')]",
      "apiVersion": "2021-11-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('portalVirtualMachineNames')[copyIndex()],'/JoinDomain',copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "portalDomainJoinCopy",
        "count": "[variables('numberOfPortalVirtualMachines')]"
      },
      "dependsOn": [
        "[variables('portalVirtualMachineNames')[copyIndex()]]"
      ],
      "tags": {
        "displayName": "(Optional) Portal Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('dataStoreAvailablitySetName')]",
      "condition": "[less(length(string(parameters('GISDatastoreRelationalVMAvailabilityZone'))),1)]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Data Store Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('dataStoreVirtualMachineNames')[copyIndex()], '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nic-copy",
        "count": "[variables('numberOfDataStoreVirtualMachines')]"
      },
      "tags": {
        "displayName": "Data Store Network Interfaces",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('gisSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[not(empty(parameters('adminPassword')))]",
      "apiVersion": "2021-11-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('dataStoreVirtualMachineNames')[copyIndex()]]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfDataStoreVirtualMachines')]"
      },
      "tags": {
        "arcgis-vm-roles": "DataStore",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "Data Store Virtual Machines"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('dataStoreVirtualMachineNames')[copyIndex()], '-', variables('nicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('dataStoreAvailablitySetName'))]"
      ],
      "properties": {
        "availabilitySet": "[if(less(length(string(parameters('GISDatastoreRelationalVMAvailabilityZone'))),1),variables('datastoreAvailabilitySetObject'),json('null'))]",
        "hardwareProfile": {
          "vmSize": "[parameters('dataStoreVirtualMachineSize')]"
        },
        "osProfile": {
          "computername": "[variables('dataStoreVirtualMachineNames')[copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('OSImageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('dataStoreVirtualMachineNames')[copyIndex()],'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('dataStoreVirtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('dataStoreVirtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": "[parameters('dataStoreVirtualMachineDataDiskSize')]",
              "lun": 0,
              "createOption": "Empty",
              "name": "[concat(variables('dataStoreVirtualMachineNames')[copyIndex()],'-','DataDisk-01')]",
              "managedDisk": {
                "storageAccountType": "[parameters('dataStoreVirtualMachineDataDiskType')]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('dataStoreVirtualMachineNames')[copyIndex()], '-',variables('nicName')))]"
            }
          ]
        }
      },
      "zones": "[if(less(length(string(parameters('GISDatastoreRelationalVMAvailabilityZone'))),1),createArray(''),createArray(string(parameters('GISDatastoreRelationalVMAvailabilityZone'))))]"
    },
    {
      "condition": "[equals(string(parameters('enableAutoShutDown')), 'True')]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', variables('dataStoreVirtualMachineNames')[copyIndex()])]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "dataStoreAutoShutDownCopy",
        "count": "[length(variables('dataStoreVirtualMachineNames'))]"
      },
      "dependsOn": [
        "[variables('dataStoreVirtualMachineNames')[copyIndex()]]"
      ],
      "properties": {
        "status": "Enabled",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings": {
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('dataStoreVirtualMachineNames')[copyIndex()])]",
        "dailyRecurrence": {
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "condition": "[equals(string(parameters('joinWindowsDomain')), 'True')]",
      "apiVersion": "2021-11-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('dataStoreVirtualMachineNames')[copyIndex()],'/JoinDomain',copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "dataStoreDomainJoinCopy",
        "count": "[length(variables('dataStoreVirtualMachineNames'))]"
      },
      "dependsOn": [
        "[variables('dataStoreVirtualMachineNames')[copyIndex()]]"
      ],
      "tags": {
        "displayName": "(Optional) Data Store Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },
    {
      "condition": "[or(not(parameters('usesExistingPublicIP')),and(equals(string(parameters('usesPrivateIP')), 'True'),equals(string(parameters('deployPublicIPWhenUsingPrivateIP')), 'True')))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[if(parameters('usesPrivateIP'),variables('unusedPublicIPWhenUsingPrivateIPResourceName'),variables('publicIPAddressResourceName'))]",
      "apiVersion": "2020-11-01",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "Application Gateway Public IP Address",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "scale": null,
      "properties": {
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 11,
        "dnsSettings": {
          "domainNameLabel": "[if(parameters('usesPrivateIP'),variables('unusedPublicIPPWhenUsingPrivateIPDnsPrefix'),parameters('dnsPrefixForPublicIpAddress'))]"
        }
      },
      "dependsOn": [
      ]
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2019-04-01",
      "name": "[variables('appGatewayName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedManagedIdentityName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[variables('userAssignedManagedIdentityID')]": {
          }
        }
      },
      "properties": {
        "sku": {
          "name": "WAF_v2",
          "tier": "WAF_v2",
          "capacity": 2
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[variables('appGatewaySubnetRef')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": "[if(parameters('usesPrivateIP'),variables('privateIPFrontEndConfiguration')[string(parameters('deployPublicIPWhenUsingPrivateIP'))],variables('publicIPFrontEndConfiguration'))]",
        "sslCertificates": [
          {
            "name": "frontendCert",
            "properties": {
              "data": "[parameters('sslCertificateData')]",
              "password": "[parameters('sslCertificatePassword')]"
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "[variables('frontendport443Name')]",
            "properties": {
              "port": 443
            }
          },
          {
            "name": "[variables('frontendport80Name')]",
            "properties": {
              "port": 80
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('serverBackendPoolName')]",
            "properties": {
              "copy": [
                {
                  "name": "backendAddresses",
                  "count": "[variables('numberOfServerVirtualMachines')]",
                  "input": {
                    "ipAddress": "[reference(concat(variables('serverVirtualMachineNames')[copyIndex('backendAddresses')],'-',variables('nicName'))).ipConfigurations[0].properties.privateIPAddress]"
                  }
                }
              ]
            }
          },
          {
            "name": "[variables('portalBackendPoolName')]",
            "properties": {
              "copy": [
                {
                  "name": "backendAddresses",
                  "count": "[variables('numberOfPortalVirtualMachines')]",
                  "input": {
                    "ipAddress": "[reference(concat(variables('portalVirtualMachineNames')[copyIndex('backendAddresses')],'-',variables('nicName'))).ipConfigurations[0].properties.privateIPAddress]"
                  }
                }
              ]
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "[variables('portalBackendHttpsSettingName')]",
            "properties": {
              "port": 7443,
              "protocol": "Https",
              "cookieBasedAffinity": "Disabled",
              "connectionDraining": {
                "enabled": true,
                "drainTimeoutInSec": 60
              },
              "pickHostNameFromBackendAddress": true,
              "path": "/arcgis/",
              "requestTimeout": 180,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/probes/', variables('portalBackendProbeName'))]"
              },
              "trustedRootCertificates": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/trustedRootCertificates/TrustedRootCertificate01')]"
                }
              ]
            }
          },
          {
            "name": "[variables('serverBackendHttpsSettingName')]",
            "properties": {
              "port": 6443,
              "protocol": "Https",
              "cookieBasedAffinity": "Disabled",
              "connectionDraining": {
                "enabled": true,
                "drainTimeoutInSec": 60
              },
              "pickHostNameFromBackendAddress": true,
              "path": "/arcgis/",
              "requestTimeout": 180,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/probes/', variables('serverBackendProbeName'))]"
              },
              "trustedRootCertificates": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/trustedRootCertificates/TrustedRootCertificate01')]"
                }
              ]
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('serverBackendProbeName')]",
            "properties": {
              "protocol": "Https",
              "path": "/arcgis/rest/info/healthcheck",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": true,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200"
                ]
              }
            }
          },
          {
            "name": "[variables('portalBackendProbeName')]",
            "properties": {
              "protocol": "Https",
              "path": "/arcgis/portaladmin/healthCheck",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": true,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200"
                ]
              }
            }
          }
        ],
        "httpListeners": [
          {
            "name": "[variables('httpDeploymentListnerName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/frontendIPConfigurations/',variables('frontendIPConfigurationsName'))]"
              },
              "frontendPort": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/frontendPorts/',variables('frontendport80Name'))]"
              },
              "protocol": "Http",
              "hostName": "[parameters('externalDnsHostName')]",
              "requireServerNameIndication": false
            }
          },
          {
            "name": "[variables('httpsDeploymentListnerName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/frontendIPConfigurations/',variables('frontendIPConfigurationsName'))]"
              },
              "frontendPort": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/frontendPorts/',variables('frontendport443Name'))]"
              },
              "protocol": "Https",
              "sslCertificate": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/sslCertificates/frontendCert')]"
              },
              "hostName": "[parameters('externalDnsHostName')]",
              "requireServerNameIndication": false
            }
          }
        ],
        "urlPathMaps": [
          {
            "name": "[variables('urlPathMapsName')]",
            "properties": {
              "defaultBackendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendAddressPools/',variables('serverBackendPoolName'))]"
              },
              "defaultBackendHttpSettings": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendHttpSettingsCollection/',variables('serverBackendHttpsSettingName'))]"
              },
              "pathRules": [
                {
                  "name": "serverPathRule",
                  "properties": {
                    "paths": [
                      "[concat('/', parameters('serverContext'), '/*')]"
                    ],
                    "backendAddressPool": {
                      "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendAddressPools/',variables('serverBackendPoolName'))]"
                    },
                    "backendHttpSettings": {
                      "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendHttpSettingsCollection/', variables('serverBackendHttpsSettingName'))]"
                    },
                    "rewriteRuleSet": {
                      "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/rewriteRuleSets/',variables('serverRewriteRuleSetName'))]"
                    }
                  }
                },
                {
                  "name": "portalPathRule",
                  "properties": {
                    "paths": [
                      "[concat('/', parameters('portalContext'), '/*')]",
                      "[concat('/', parameters('portalContext'))]"
                    ],
                    "backendAddressPool": {
                      "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendAddressPools/',variables('portalBackendPoolName'))]"
                    },
                    "backendHttpSettings": {
                      "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/backendHttpSettingsCollection/', variables('portalBackendHttpsSettingName'))]"
                    },
                    "rewriteRuleSet": {
                      "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/rewriteRuleSets/',variables('portalRewriteRuleSetName'))]"
                    }
                  }
                }
              ]
            }
          }
        ],
        "redirectConfigurations": [
          {
            "name": "[variables('redirectConfigurationName')]",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/httpListeners/',variables('httpsDeploymentListnerName'))]"
              },
              "includePath": true,
              "includeQueryString": true,
              "requestRoutingRules": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/requestRoutingRules/',variables('httpToHttpsRequestRoutingRule'))]"
                }
              ]
            }
          }
        ],
        "requestRoutingRules": [
          {
            "Name": "[variables('requestRoutingRule')]",
            "properties": {
              "RuleType": "PathBasedRouting",
              "httpListener": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/httpListeners/',variables('httpsDeploymentListnerName'))]"
              },
              "urlPathMap": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/urlPathMaps/',variables('urlPathMapsName'))]"
              }
            }
          },
          {
            "name": "[variables('httpToHttpsRequestRoutingRule')]",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/httpListeners/',variables('httpDeploymentListnerName'))]"
              },
              "redirectConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName')), '/redirectConfigurations/',variables('redirectConfigurationName'))]"
              }
            }
          }
        ],
        "rewriteRuleSets": [
          {
            "name": "[variables('portalRewriteRuleSetName')]",
            "properties": {
              "rewriteRules": [
                {
                  "ruleSequence": 50,
                  "conditions": [],
                  "name": "XForwardedHostRewrite",
                  "actionSet": {
                    "requestHeaderConfigurations": [
                      {
                        "headerName": "X-Forwarded-Host",
                        "headerValue": "{http_req_host}"
                      }
                    ],
                    "responseHeaderConfigurations": []
                  }
                },
                {
                  "ruleSequence": 100,
                  "conditions": [
                    {
                      "variable": "http_resp_Location",
                      "pattern": "[concat('(https?):\\/\\/[^\\/]+:7443\\/(?:arcgis|',parameters('portalContext'),')(.*)$')]",
                      "ignoreCase": true,
                      "negate": false
                    }
                  ],
                  "name": "PortalRewrite",
                  "actionSet": {
                    "requestHeaderConfigurations": [],
                    "responseHeaderConfigurations": [
                      {
                        "headerName": "RewriteLocationValue",
                        "headerValue": "[concat('{http_resp_Location_1}://{http_req_host}/',parameters('portalContext'),'{http_resp_Location_2}')]"
                      },
                      {
                        "headerName": "Location",
                        "headerValue": "[concat('{http_resp_Location_1}://{http_req_host}/',parameters('portalContext'),'{http_resp_Location_2}')]"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "[variables('serverRewriteRuleSetName')]",
            "properties": {
              "rewriteRules": [
                {
                  "ruleSequence": 50,
                  "conditions": [],
                  "name": "XForwardedHostRewrite",
                  "actionSet": {
                    "requestHeaderConfigurations": [
                      {
                        "headerName": "X-Forwarded-Host",
                        "headerValue": "{http_req_host}"
                      }
                    ],
                    "responseHeaderConfigurations": []
                  }
                },
                {
                  "ruleSequence": 100,
                  "conditions": [
                    {
                      "variable": "http_resp_Location",
                      "pattern": "[concat('(https?):\\/\\/[^\\/]+:6443\\/(?:arcgis|',parameters('serverContext'),')(.*)$')]",
                      "ignoreCase": true,
                      "negate": false
                    }
                  ],
                  "name": "ServerRewrite",
                  "actionSet": {
                    "requestHeaderConfigurations": [],
                    "responseHeaderConfigurations": [
                      {
                        "headerName": "RewriteLocationValue",
                        "headerValue": "[concat('{http_resp_Location_1}://{http_req_host}/',parameters('serverContext'),'{http_resp_Location_2}')]"
                      },
                      {
                        "headerName": "Location",
                        "headerValue": "[concat('{http_resp_Location_1}://{http_req_host}/',parameters('serverContext'),'{http_resp_Location_2}')]"
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        "trustedRootCertificates": [
          {
            "name": "TrustedRootCertificate01",
            "properties": {
              "data": "[parameters('TrustedRootCertificateData')]"
            }
          }
        ]
      },
      "zones": [
        "1",
        "2",
        "3"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-05-01",
      "name": "[concat('privateDNSNSGNestedDeployment-',deployment().name)]",
      "resourceGroup": "[parameters('virtualNetworkResourceGroupName')]",
      "dependsOn": [
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
          },
          "variables": {
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "privatelink.file.core.windows.net",
              "location": "global",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "privatelink.vaultcore.azure.net",
              "location": "global",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[concat('privatelink.vaultcore.azure.net', '/', parameters('existingVirtualNetworkName'), '-link')]",
              "location": "global",
              "dependsOn": [
                "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/privateDnsZones', 'privatelink.file.core.windows.net')]"
              ],
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[variables('vnetID')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[concat('privatelink.file.core.windows.net', '/', parameters('existingVirtualNetworkName'), '-link')]",
              "location": "global",
              "dependsOn": [
                "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net')]"
              ],
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[variables('vnetID')]"
                }
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-05-01",
              "name": "[variables('multiPurposeNSGName')]",
              "location": "[parameters('location')]",
              "properties": {
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-06-01",
              "name": "[variables('azureSQLMINSGName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "allow_tds_inbound",
                    "properties": {
                      "description": "Allow access to data",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "1433",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1000,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "allow_redirect_inbound",
                    "properties": {
                      "description": "Allow inbound redirect traffic to Managed Instance inside the virtual network",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "11000-11999",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1100,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "deny_all_inbound",
                    "properties": {
                      "description": "Deny all other inbound traffic",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Deny",
                      "priority": 4096,
                      "direction": "Inbound"
                    }
                  },
                  {
                    "name": "deny_all_outbound",
                    "properties": {
                      "description": "Deny all other outbound traffic",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "*",
                      "access": "Deny",
                      "priority": 4096,
                      "direction": "Outbound"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2020-06-01",
              "name": "[variables('azureSQLMIUDRName')]",
              "location": "[parameters('location')]",
              "properties": {
                "disableBgpRoutePropagation": false
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2021-05-01",
              "name": "[concat(parameters('existingVirtualNetworkName'), '/', parameters('WebAdaptorSubnetName'))]",
              "dependsOn": [
                "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/networkSecurityGroups', variables('multiPurposeNSGName'))]"
              ],
              "properties": {
                "addressPrefix": "[reference(resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('WebAdaptorSubnetName')),'2021-05-01', 'Full').properties.addressPrefix]",
                "networkSecurityGroup": {
                  "id": "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/networkSecurityGroups', variables('multiPurposeNSGName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2021-05-01",
              "name": "[concat(parameters('existingVirtualNetworkName'), '/', parameters('JumpBoxSubnetName'))]",
              "dependsOn": [
                "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('WebAdaptorSubnetName'))]"
              ],
              "properties": {
                "addressPrefix": "[reference(resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('JumpBoxSubnetName')),'2021-05-01', 'Full').properties.addressPrefix]",
                "networkSecurityGroup": {
                  "id": "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/networkSecurityGroups', variables('multiPurposeNSGName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2021-05-01",
              "name": "[concat(parameters('existingVirtualNetworkName'), '/', parameters('GISSubnetName'))]",
              "dependsOn": [
                "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('JumpBoxSubnetName'))]"
              ],
              "properties": {
                "addressPrefix": "[reference(resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('GISSubnetName')),'2021-05-01', 'Full').properties.addressPrefix]",
                "networkSecurityGroup": {
                  "id": "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/networkSecurityGroups', variables('multiPurposeNSGName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2021-05-01",
              "name": "[concat(parameters('existingVirtualNetworkName'), '/', parameters('StorageAccountSubnetName'))]",
              "dependsOn": [
                "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('GISSubnetName'))]"
              ],
              "properties": {
                "addressPrefix": "[reference(resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('StorageAccountSubnetName')),'2021-05-01', 'Full').properties.addressPrefix]",
                "networkSecurityGroup": {
                  "id": "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/networkSecurityGroups', variables('multiPurposeNSGName'))]"
                }
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2021-05-01",
              "name": "[concat(parameters('existingVirtualNetworkName'), '/', parameters('AzureSQLMISubnetName'))]",
              "dependsOn": [
                "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('StorageAccountSubnetName'))]",
                "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/networkSecurityGroups', variables('azureSQLMINSGName'))]",
                "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/routeTables', variables('azureSQLMIUDRName'))]"
              ],
              "properties": {
                "addressPrefix": "[reference(resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('existingVirtualNetworkName'), parameters('AzureSQLMISubnetName')),'2021-05-01', 'Full').properties.addressPrefix]",
                "networkSecurityGroup": {
                  "id": "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/networkSecurityGroups', variables('azureSQLMINSGName'))]"
                },
                "routeTable": {
                  "id": "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/routeTables', variables('azureSQLMIUDRName'))]"
                },
                "delegations": [
                  {
                    "name": "managedInstanceDelegation",
                    "properties": {
                      "serviceName": "Microsoft.Sql/managedInstances"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName'))))]",
      "name": "[concat(parameters('JumpBoxVirtualMachineName'),'/LogAnalytics')]",
      "apiVersion": "2021-11-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('JumpBoxVirtualMachineName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName'))))]",
      "name": "[concat(parameters('WebAdaptorVirtualMachineName'),'/LogAnalytics')]",
      "apiVersion": "2021-11-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('WebAdaptorVirtualMachineName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName'))))]",
      "name": "[concat(variables('serverVirtualMachineNames')[copyIndex()],'/LogAnalytics')]",
      "apiVersion": "2021-11-01",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfServerVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('serverVirtualMachineNames')[copyIndex()])]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName'))))]",
      "name": "[concat(variables('portalVirtualMachineNames')[copyIndex()],'/LogAnalytics')]",
      "apiVersion": "2021-11-01",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfPortalVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('portalVirtualMachineNames')[copyIndex()])]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName'))))]",
      "name": "[concat(variables('dataStoreVirtualMachineNames')[copyIndex()],'/LogAnalytics')]",
      "apiVersion": "2021-11-01",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfDataStoreVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('dataStoreVirtualMachineNames')[copyIndex()])]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-10-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedManagedIdentityName'))]"
      ],
      "tags": {
        "displayName": "Secret Management for App Gateway"
      },
      "properties": {
        "accessPolicies": [
          {
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedManagedIdentityName'))).principalId]",
            "permissions": {
              "certificates": [ "get" ],
              "secrets": [
                "get"
              ]
            },
            "tenantId": "[tenant().tenantId]"
          }
        ],
        "enabledForDeployment": true,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "enableRbacAuthorization": false,
        "enableSoftDelete": false,
        "publicNetworkAccess": "disabled",
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[tenant().tenantId]"
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2020-06-01",
      "name": "[variables('keyVaultPrivateEndpointName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId(subscription().subscriptionId, resourceGroup().name, 'Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[concat('privateDNSNSGNestedDeployment-',deployment().name)]"
      ],
      "tags": {
        "displayName": "Private Endpoint for Key Vault."
      },
      "properties": {
        "subnet": {
          "id": "[variables('storageAccountSubnetRef')]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('keyVaultPrivateEndpointName')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
              "groupIds": [
                "vault"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2020-11-01",
      "name": "[concat(variables('keyVaultPrivateEndpointName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName'))]",
        "[concat('privateDNSNSGNestedDeployment-',deployment().name)]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink_vaultcore_azure_net",
            "properties": {
              "privateDnsZoneId": "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-01-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
      ],
      "tags": {
        "displayName": "Storage Account for File Share"
      },
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2021-08-01",
      "name": "[concat(variables('storageAccountName'), '/default/', parameters('fileShareName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "tags": {
        "displayName": "File Share"
      },
      "properties": {
        "accessTier": "Hot",
        "enabledProtocols": "SMB",
        "metadata": {},
        "shareQuota": 5
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2020-06-01",
      "name": "[variables('storageAccountPrivateEndpointName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId(subscription().subscriptionId, resourceGroup().name, 'Microsoft.Storage/storageAccounts/fileServices/shares', variables('storageAccountName'), 'default', parameters('fileShareName'))]",
        "[concat('privateDNSNSGNestedDeployment-',deployment().name)]"
      ],
      "tags": {
        "displayName": "Private Endpoint for Storage Account"
      },
      "properties": {
        "subnet": {
          "id": "[variables('storageAccountSubnetRef')]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('storageAccountPrivateEndpointName')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
              "groupIds": [
                "file"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2020-11-01",
      "name": "[concat(variables('storageAccountPrivateEndpointName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('storageAccountPrivateEndpointName'))]",
        "[concat('privateDNSNSGNestedDeployment-',deployment().name)]"
      ],
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink_file_core_windows_net",
            "properties": {
              "privateDnsZoneId": "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/privateDnsZones', 'privatelink.file.core.windows.net')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Sql/managedInstances",
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('AzureSQLMIName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('privateDNSNSGNestedDeployment-',deployment().name)]"
      ],
      "tags": {
        "displayName": "Azure SQL Managed Instance"
      },
      "sku": {
        "name": "[parameters('AzureSQLMISKUName')]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "administratorLogin": "[parameters('AzureSQLMIAdministratorName')]",
        "administratorLoginPassword": "[parameters('AzureSQLMIAdministratorPassword')]",
        "administrators": {
          "administratorType": "ActiveDirectory",
          "azureADOnlyAuthentication": false,
          "login": "[parameters('AzureSQLMIAADAdministratorLoginName')]",
          "principalType": "[parameters('AzureSQLMIAADAdministratorType')]",
          "sid": "[parameters('AzureSQLMIAADAdministratorObjectID')]",
          "tenantId": "[tenant().tenantId]"
        },
        "minimalTlsVersion": "1.2",
        "publicDataEndpointEnabled": false,
        "subnetId": "[variables('azureSQLMISubnetRef')]",
        "storageSizeInGB": "[parameters('AzureSQLMIStorageSize')]",
        "vCores": "[parameters('AzureSQLMIvCores')]",
        "licenseType": "[parameters('AzureSQLMILicenseType')]",
        "zoneRedundant": "[if(greaterOrEquals(length(pickZones('Microsoft.Sql','managedInstances',resourcegroup().location)),1),bool('true'),bool('false'))]"
      }
    },
    {
      "condition": "[and(equals(string(variables('enableTileCacheDataStore')),'True'),less(length(string(parameters('GISDatastoreTileCacheAvailabilityZone'))),1))]",
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('tileCacheDataStoreAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "(Optional) Tile Cache Data Store Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[equals(string(variables('enableTileCacheDataStore')),'True')]",
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()], '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nic-copy",
        "count": "[variables('numberOfTileCacheDataStoreVirtualMachines')]"
      },
      "tags": {
        "displayName": "(Optional) Tile Cache Data Store Network Interfaces",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('gisSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[and(not(empty(parameters('adminPassword'))), equals(string(variables('enableTileCacheDataStore')),'True'))]",
      "apiVersion": "2021-11-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()]]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfTileCacheDataStoreVirtualMachines')]"
      },
      "tags": {
        "arcgis-vm-roles": "TileCacheDataStore",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "(Optional) Tile Cache Data Store Virtual Machines"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()], '-', variables('nicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('tileCacheDataStoreAvailablitySetName'))]"
      ],
      "properties": {
        "availabilitySet": "[if(less(length(string(parameters('GISDatastoreTileCacheAvailabilityZone'))),1),variables('tileCacheDataStoreAvailabilitySetObject'),json('null'))]",
        "hardwareProfile": {
          "vmSize": "[parameters('tileCacheDataStoreVirtualMachineSize')]"
        },
        "osProfile": {
          "computername": "[variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('OSImageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('tileCacheDataStoreVirtualMachineNames')[copyIndex()],'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('tileCacheDataStoreVirtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('tileCacheDataStoreVirtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": "[parameters('tileCacheDataStoreVirtualMachineDataDiskSize')]",
              "lun": 0,
              "createOption": "Empty",
              "name": "[concat(variables('tileCacheDataStoreVirtualMachineNames')[copyIndex()],'-','DataDisk-01')]",
              "managedDisk": {
                "storageAccountType": "[parameters('tileCacheDataStoreVirtualMachineDataDiskType')]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('tileCacheDataStoreVirtualMachineNames')[copyIndex()], '-',variables('nicName')))]"
            }
          ]
        }
      },
      "zones": "[if(less(length(string(parameters('GISDatastoreTileCacheAvailabilityZone'))),1),createArray(''),createArray(string(parameters('GISDatastoreTileCacheAvailabilityZone'))))]"
    },
    {
      "condition": "[and(equals(string(variables('enableTileCacheDataStore')),'True'), equals(string(parameters('enableAutoShutDown')), 'True'))]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "tileCacheAutoShutDownCopy",
        "count": "[variables('numberOftileCacheDataStoreVirtualMachines')]"
      },
      "dependsOn": [
        "[variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()]]"
      ],
      "properties": {
        "status": "Enabled",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings": {
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('tileCacheDataStoreVirtualMachineNames')[copyIndex()])]",
        "dailyRecurrence": {
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "condition": "[and(equals(string(variables('enableTileCacheDataStore')),'True'), equals(string(parameters('joinWindowsDomain')), 'True'))]",
      "apiVersion": "2021-11-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()],'/JoinDomain', copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "tileCacheDataStoreDomainJoinCopy",
        "count": "[length(variables('tileCacheDataStoreVirtualMachineNames'))]"
      },
      "dependsOn": [
        "[variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()]]"
      ],
      "tags": {
        "displayName": "(Optional) Tile Cache Store Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName')))), variables('enableTileCacheDataStore'))]",
      "name": "[concat(variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()],'/LogAnalytics')]",
      "apiVersion": "2021-11-01",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfTileCacheDataStoreVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('tileCacheDataStoreVirtualMachineNameOptions')[string(variables('enableTileCacheDataStore'))][copyIndex()])]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },
    {
      "condition": "[and(equals(string(variables('enableSpatiotemporalBigDataStore')),'True'),less(length(string(parameters('GISDatastoreSpatiotemporalVMAvailabilityZone'))),1))]",
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('spatiotemporalBigDataStoreAvailablitySetName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "(Optional) Big Data Store Availability Set",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "properties": {
        "platformUpdateDomainCount": 2,
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[equals(string(variables('enableSpatiotemporalBigDataStore')),'True')]",
      "apiVersion": "2020-11-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()], '-', variables('nicName'))]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nic-copy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]"
      },
      "tags": {
        "displayName": "(Optional) Big Data Store Network Interfaces",
        "arcgis-deployment-id": "[variables('deploymentId')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('gisSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[and(not(empty(parameters('adminPassword'))), equals(string(variables('enableSpatiotemporalBigDataStore')),'True'))]",
      "apiVersion": "2021-11-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]"
      },
      "tags": {
        "arcgis-vm-roles": "SpatiotemporalDataStore",
        "arcgis-deployment-id": "[variables('deploymentId')]",
        "displayName": "(Optional) Big Data Store Virtual Machines"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()], '-', variables('nicName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('spatiotemporalBigDataStoreAvailablitySetName'))]"
      ],
      "properties": {
        "availabilitySet": "[if(less(length(string(parameters('GISDatastoreSpatiotemporalVMAvailabilityZone'))),1),variables('spatioTemporalAvailabilitySetObject'),json('null'))]",
        "hardwareProfile": {
          "vmSize": "[parameters('spatiotemporalBigDataStoreVirtualMachineSize')]"
        },
        "osProfile": {
          "computername": "[variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "timeZone": "[parameters('timeZoneId')]"
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('OSImageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNames')[copyIndex()],'-','OSDisk')]",
            "managedDisk": {
              "storageAccountType": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskType')]"
            },
            "diskSizeGB": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": "[parameters('spatiotemporalBigDataStoreVirtualMachineDataDiskSize')]",
              "lun": 0,
              "createOption": "Empty",
              "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNames')[copyIndex()],'-','DataDisk-01')]",
              "managedDisk": {
                "storageAccountType": "[parameters('spatiotemporalBigDataStoreVirtualMachineDataDiskType')]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('spatiotemporalBigDataStoreVirtualMachineNames')[copyIndex()], '-',variables('nicName')))]"
            }
          ]
        }
      },
      "zones": "[if(less(length(string(parameters('GISDatastoreSpatiotemporalVMAvailabilityZone'))),1),createArray(''),createArray(string(parameters('GISDatastoreSpatiotemporalVMAvailabilityZone'))))]"
    },
    {
      "condition": "[and(equals(string(variables('enableSpatiotemporalBigDataStore')),'True'), equals(string(parameters('enableAutoShutDown')), 'True'))]",
      "apiVersion": "2018-09-15",
      "type": "Microsoft.DevTestLab/schedules",
      "name": "[concat('shutdown-computevm-', variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "spatioTemporalAutoShutDownCopy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]"
      ],
      "properties": {
        "status": "[if(parameters('enableAutoShutDown'),'Enabled','Disabled')]",
        "timeZoneId": "[parameters('timeZoneId')]",
        "taskType": "ComputeVmShutdownTask",
        "notificationSettings": {
          "status": "Disabled",
          "timeInMinutes": 15,
          "webhookUrl": ""
        },
        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', variables('spatiotemporalBigDataStoreVirtualMachineNames')[copyIndex()])]",
        "dailyRecurrence": {
          "time": "[parameters('autoShutDownTime')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "condition": "[and(and(not(empty(parameters('omsWorkspaceResourceGroupName'))),not(empty(parameters('omsWorkspaceName')))), variables('enableSpatiotemporalBigDataStore'))]",
      "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()],'/LogAnalytics')]",
      "apiVersion": "2021-11-01",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vm-copy",
        "count": "[variables('numberOfSpatiotemporalBigDataStoreVirtualMachines')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()])]"
      ],
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "workspaceId": "[if(not(empty(variables('omsWorkspaceResourceId'))),reference(variables('omsWorkspaceResourceId'),'2015-11-01-preview').customerId ,json('null'))]"
        },
        "protectedSettings": {
          "workspaceKey": "[if(not(empty(variables('omsWorkspaceResourceId'))),listKeys(variables('omsWorkspaceResourceId'),'2015-11-01-preview').primarySharedKey ,json('null'))]"
        }
      }
    },
    {
      "condition": "[and(equals(string(variables('enableSpatiotemporalBigDataStore')),'True'), equals(string(parameters('joinWindowsDomain')), 'True'))]",
      "apiVersion": "2021-11-01",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()],'/JoinDomain', copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "bigDataStoreDomainJoinCopy",
        "count": "[length(variables('spatiotemporalBigDataStoreVirtualMachineNames'))]"
      },
      "dependsOn": [
        "[variables('spatiotemporalBigDataStoreVirtualMachineNameOptions')[string(variables('enableSpatiotemporalBigDataStore'))][copyIndex()]]"
      ],
      "tags": {
        "displayName": "(Optional) Big Data Store Domain Join"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('windowsDomainName')]",
          "User": "[parameters('windowsDomainAdministratorUserName')]",
          "Restart": "true",
          "Options": 3
        },
        "protectedSettings": {
          "Password": "[parameters('windowsDomainAdministratorPassword')]"
        }
      }
    }
  ],
  "outputs": {
    "homeAppUrl": {
      "type": "string",
      "value": "[concat('https://', parameters('externalDnsHostName'))]"
    }
  }
}